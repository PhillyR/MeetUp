PhillyR Learn R Series: Fun with Factors
========================================================
author: Leon Kim
date: December 6, 2017
incremental: false
width: 1980
height: 980

```{r, echo=F}
library(ggplot2)
```

Factors
========================================================
- Factor variable is a variable that takes some limited number of different values.

- In real life, this is what categorical variable is

- These limited values can be boolean, numeric, or text

-- `IsFraud` : fraud or not fraud (true or not true)

-- `GradeLevel` : 1, 2, 3, 4, ..., 12

-- `Treatment` : "control", "treatment A", or "treatment B"

The real life 
========================================================
- Categorical variables are in raw format

```{r, echo=F}
Undergrad <- BSDA::Undergrad
head(Undergrad)
```

- Categorical variables can be coded
```{r, echo=F}
Undergrad$Male <- ifelse(Undergrad$gender == "Male", 1, 0)
head(Undergrad)
```

Categorical variable with multiple values
========================================================
```{r}
sort(unique(Undergrad$major)) # Undergrad from library(BSDA)
```
- What if we make "Accounting" -> 1, "Biology" -> 2, ... , "Sociology" -> 11

```{r, echo=F}
Undergrad2 <- head(BSDA::Undergrad)
Undergrad2$major_coded <- c(9, 2, 10, 10, 8, 4)
head(Undergrad2)
```

Why numbers to represent characters?
========================================================
- R and it's predecessor S were primarily used for statistical purposes.

- Character variable usually represented some measurement with limited possible values.

- To use character variable in statistical models, it needs to be expanded to dummy variables (more on this later).

RAM is expensive
========================================================
- When you know **major** values takes one of 11 character string, why bother storing duplicate values? (similar to relational databases and duplicate values)

- In computers, characters take more *bits* to represent than integers do

- Key concepts for factor variable implementation:

> 1. Use numbers to represent each unique characters

> 2. Factor variable should store this meta data (string <-> number mapping)

major as a factor variable
========================================================
```{r}
major_f <- factor(Undergrad$major); head(major_f)
# Character variable
class(Undergrad$major)
# Factor variable
class(major_f)
# See all the possible values for major variable
levels(major_f)
```

Surprise
========================================================
```{r}
# ????
typeof(major_f)
# what happens if we try to convert to numeric?
as.numeric(major_f)[1:10]
as.numeric(Undergrad$major)[1:10]
# See the structure using str()
str(major_f)
```

R object attributes
========================================================
- R objects can have attributes (metadata) about the object
- An attribute can be added by name to any R object

```{r, echo=F}
mtcars <- head(mtcars)
```

```{r}
head(mtcars) 
names(mtcars)
rownames(mtcars)
```

R object attributes
========================================================
```{r}
attributes(mtcars)
```
***
```{r}
attr(mtcars, "my_attribute") <- "I love R"
attributes(mtcars)
```

Get & set attributes using functions
========================================================
- **levels**: "levels provides access to the levels attribute of a variable. The first form returns the value of the levels of its argument and the second sets the attribute."

```{r}
iris$Species[c(1, 60, 120)]
iris$Species_new <- iris$Species; levels(iris$Species_new)
```
***
```{r}
levels(iris$Species_new) <- c("SETOSA", "VERSICOLOR", "VIRGINICA")
levels(iris$Species_new)
head(iris[c(1, 60, 120),c("Species", "Species_new")])
```

Get & set attributes using attr()
========================================================
- When no functions are available (or you are making your own custom attributes), use **attr(object, attribute_name)**

```{r}
attributes(iris$Species) # List all attributes in R object
attr(iris$Species, "levels") # Get
attr(iris$Species, "levels") <- c("SETOSA", "VERSICOLOR", "VIRGINICA") # Set
attr(iris$Species, "levels")
```

- Sneak peak: factor levels should not be modified this way, but the above shows how to modify attributes in general.

Back to factors
========================================================
- By understanding how attributes work, we can see that a vector of characters are changed to numeric variables 

- 1 corresponds to 1st level, 2 corresponds to 2nd level etc. and are indexed to the levels. Default behavior of **factors** is to sort levels alphabetically.

- On the R console, you don't see these indices and only see the character levels corresponding to the indices. However, factor variables act like they are indices.

- numeric variables can be factor variables as well-- but levels are stored as characters

What does this mean for my daily R use?
========================================================
- Factor variables look like character variables and even allows some functions to implicitly work (e.g. **paste()**)

- Many "gotchas" when your categorical variables are numbers

```{r}
df <- data.frame(
  name = c("Scott", "Leon", "Jeremy", "Hadley"),
  grade = factor(c(2, 1, 5, 5))
)
df
df$grade
```

```{r, eval=F}
mean(df$grade) # Can't add factors, will result in error
```


What is the average grade of R Users?
========================================================
```{r}
df$grade
grade_as_numeric <- as.numeric(df$grade)
mean(grade_as_numeric)
# Expected something else
mean(c(2,1,5,5))
grade_as_numeric # Let's take a look. Something's wrong. Where did 3 come from?
levels(df$grade) # Reason: look at the 3rd level
```

To get the factor levels values, use indexing technique
========================================================
```{r}
levels(df$grade) # the target
df$grade # the indices! Remember how factor is numeric index of levels?
levels(df$grade)[df$grade]
as.numeric(levels(df$grade)[df$grade])
mean(as.numeric(levels(df$grade)[df$grade]))
```

Factor use cases in data visualization
========================================================
```{r, fig.width=12}
Undergrad$class <- factor(Undergrad$class) # make to factor
levels(Undergrad$class)
barplot(table(Undergrad$class))
```

***

```{r, fig.width=12}
ggplot(Undergrad, aes(class)) + geom_bar()
```


What happens if we subset the data
========================================================
- When subsetted, the factor variable keeps the levels even if it doesn't exist

```{r}
Undergrad_no_junior <- subset(Undergrad, class != "Junior")
table(Undergrad_no_junior$class)
levels(Undergrad_no_junior$class)
unique(as.numeric(Undergrad_no_junior$class)) # look at unique indices
```
***
```{r}
barplot(table(Undergrad_no_junior$class))
```

- **levels** attributes isn't just some useless metadata.

Re-ordering the categorical groups in plot
========================================================
- Possibly the most asked questions on Stackoverflow
- Just re-order the **levels** by factoring the variable with different levels specified

```{r}
Undergrad$class_refactored <- 
  factor(Undergrad$class, levels = c("Freshman", "Sophomore", "Junior", "Senior"))
head(Undergrad[,c("class", "class_refactored")])
```
***
```{r, fig.width=12}
levels(Undergrad$class_refactored)
barplot(table(Undergrad$class_refactored))
```

Do not assign to level directly
========================================================
- **level(x) <- c(...)** only changes the unique levels, not the indicies. The internal values will be messed up (wrong index maps to wrong level)

```{r}
Undergrad$class_via_levels_assign <- Undergrad$class
Undergrad$class_via_attr <- Undergrad$class
# Two wrong ways to re-order factors
levels(Undergrad$class_via_levels_assign) <- c("Freshman", "Sophomore", "Junior", "Senior")
attr(Undergrad$class_via_attr, "levels") <- c("Freshman", "Sophomore", "Junior", "Senior")
# Let's see if the value orders stayed the same
head(Undergrad[,c("class", "class_refactored", "class_via_levels_assign","class_via_attr")])
```

- Use **level(x) <- c(...)** to replace the value of levels. **level(x) <- c(...)** is the preferred method than **attr(x, "levels") <- c(...)**

Other helpful functions to change levels
========================================================
- **factor(x, ...)**: various parameters available in factor function

- **relevel**: sets one of the factor level as the first level, moving the rest of the levels down 

- **reorder(x, y, FUN)**: for each subset of rows with value x, determine the factor order of x by FUN(y)

- **levels(x)[i] <- NA**: removes the i^th level from factor variable. Any value with that level will be NA

- **x[, drop = TRUE]** removes all levels without any matching indices

```{r, eval=F}
levels(Undergrad_no_junior$class)[2] <- NA
barplot(table(Undergrad_no_junior$class))
```
***
- Probably the second most popular question in Stackoverflow: "How to remove a empty group from plot"

```{r, echo=F, fig.width=12}
Undergrad_no_junior$class_original <- Undergrad_no_junior$class # for the next slide
levels(Undergrad_no_junior$class)[2] <- NA
barplot(table(Undergrad_no_junior$class))
```

Except for ggplot2
========================================================
- **ggplot** plots are generous enough to remove factor level with no values from plotting

```{r, echo=F}
Undergrad_no_junior$class <- Undergrad_no_junior$class_original
```

```{r, fig.width=12}
ggplot(Undergrad_no_junior, aes(class)) + 
  geom_bar()
```
***
- Use **scale_*_discrete(drop=FALSE)** to force all factor levels to show up
```{r, fig.width=12}
ggplot(Undergrad_no_junior, aes(x=class)) + 
  geom_bar() + 
  scale_x_discrete(drop=FALSE)
```

Factors in visualizations
========================================================
- the order of the levels matter

- the possible choices of levels matter

- base plot vs ggplot behavior

Factor math
========================================================
- In **factor()** there is a parameter **ordered**. There is also a function called **ordered()**

```{r}
head(Undergrad$class_refactored)
head(Undergrad$class_ordered <- factor(Undergrad$class_refactored, ordered=T))
```

- The "order" of levels in previous slides are not actually "in order". The levels attribute for the factor variable just happened to be in the order that we want.

- If there is a legitimate order to the factor levels and you want to do some mathematical operations with respects to that order, make your factor an ordered one.

```{r}
Undergrad$class_ordered[2] < Undergrad$class_ordered[3] # Sophomore vs Senior
```

```{r, eval=F}
Undergrad$class[2] < Undergrad$class[3] # returns NA with warning
```

Factors in regression
========================================================
- Many statistical models require numeric variables for the model training step (e.g. regression)

- In Python model fitting process, preprocessing steps involve converting categorical variable to numeric columns.

- In R, this step is essentially done automatically / hidden away from you because of factor variables (for better or worse)

- You probably know this step as creating dummy variables, contrast treatment, or one-hot encoding

```{r}
contrasts(Undergrad$class) 
head(stats::model.matrix(~class, Undergrad))
```


Running regression models
========================================================
- Fortunately for us, we don't need to do manually create dummy variables like this. R does this for us, but we should know what's happening

- We should note that the default behavior is to treat the first factor level as the reference group

- If you did not explicitly create factor variable, R will convert the character variable with the the *smallest* factor level as the reference group

- *smallest*? : smallest in terms of alphanumeric order -- i.e. the default behavior of factor we talked about earlier 


Regression example with hand-waving explanations
========================================================
- One level has to be dropped because we know the last category if we know all the others (i.e. first factor level if we are using the default R behavior)

- Intercepts

- Other encoding techniques exist, including those for ordered factors

- See more more talented people explain this very important but often ignored topic:

1. https://stats.idre.ucla.edu/r/library/r-library-contrast-coding-systems-for-categorical-variables/
2. http://appliedpredictivemodeling.com/blog/2013/10/23/the-basics-of-encoding-categorical-data-for-predictive-models
3. http://www.win-vector.com/blog/2017/04/encoding-categorical-variables-one-hot-and-beyond/


In action: Let's model a student's  number of courses dropped
========================================================
```{r, echo=F}
# Removing some Freshman rows for demo purpose
Undergrad <- BSDA::Undergrad
Undergrad <- BSDA::Undergrad[-c(42,45,46,50,53,55,56,59,68,69,70,75,77,79,84,90,93), ]
Undergrad$class <- factor(Undergrad$class, c("Freshman", "Sophomore", "Junior", "Senior"))
```

```{r}
head(Undergrad)
# Evaluate the effect of class on number of course drops
broom::tidy(lm(drops ~ class + gpa + gender, data = Undergrad))
```

Reference group
========================================================
```{r}
head(Undergrad$class_Sen <- relevel(Undergrad$class, "Senior"))
# Evaluate the effect of class on number of course drops
broom::tidy(lm(drops ~ class_Sen + gpa + gender, data = Undergrad))
```


Side-by-side
========================================================
```{r}
m_fresh <- broom::tidy(lm(drops ~ class + gpa + gender, data = Undergrad))[,c(1:3,5)]
m_fresh$p.value <- round(m_fresh$p.value, 4)
m_fresh
# E(drops) of a junior male with GPA of 3.0
(2.3713166) + (1.7119629) + (-0.6130617*3.0) + (-0.2049396)
```
***
```{r}
m_senior <- broom::tidy(lm(drops ~ class_Sen + gpa + gender, data = Undergrad))[,c(1:3,5)]
m_senior$p.value <- round(m_senior$p.value, 4)
m_senior
# E(drops) of a junior male with GPA of 3.0
(4.4471742) + (-0.3638948) + (-0.6130617*3.0) + (-0.2049396)
```


The magic trick
========================================================
```{r}
table(Undergrad$class)
head(Undergrad$class_Soph <- relevel(Undergrad$class, "Sophomore"))
m_soph <- broom::tidy(lm(drops ~ class_Soph + gpa + gender, data = Undergrad))[,c(1:3,5)]
m_soph$p.value <- round(m_soph$p.value, 4)

head(Undergrad$class_Jun <- relevel(Undergrad$class, "Junior"))
m_junior <- broom::tidy(lm(drops ~ class_Jun + gpa + gender, data = Undergrad))[,c(1:3,5)]
m_junior$p.value <- round(m_junior$p.value, 4)
```

Lies, damn lies, and statistics
========================================================
```{r}
m_fresh
m_soph
```
***
```{r}
m_junior
m_senior
```

Tips for using factors in modeling (with neither guarantee nor justification)
========================================================
- Use the most frequent level as the reference group

- Use other encoding techniques
